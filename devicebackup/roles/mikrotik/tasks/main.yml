---
# tasks file for mikrotik


############################
# Références:

# --> cisco.ios.ios_interfaces:
# https://docs.ansible.com/ansible/latest/collections/cisco/ios/ios_interfaces_module.html


############################
# Commentaires:

# Comment utilsier le PlayBook:
# 1- Cloner le projet
# 2- Modifier le ficiher devicebackup/hosts et y ajouter les IP / FQDN et les identifiants des équipements
# 3- Aller en SSH dans le dossier devicebackup
# 4- Lancer la commande suivante :
# ansible-playbook -i hosts-cisco ansible-miktorik.yml




- name: Backup Mikrotik via SSH and save to a cfg file in backup Directory
  ansible.builtin.shell: sshpass -p "{{ ansible_ssh_pass }}" ssh -o StrictHostKeyChecking=no "{{ ansible_ssh_user }}"@"{{ inventory_hostname }}" "/export" >> "{{ playbook_dir }}/roles/mikrotik/backups/{{ inventory_hostname }}_config.{{ ansible_date_time.date }}@{{ ansible_date_time.time }}.cfg"
  register: output

- name: Backup Mikrotik via SSH and save to a cfg file in backup Directory output
  debug:
    msg:  "{{ output }}"

# - name: Backup Mikrotik via SSH and save to a cfg file in backup Directory output show TYPE
#   debug:
#     msg:  "{{ output | type_debug }}"




- name: /system resource print Mikrotik via SSH and save to a txt file in backup Directory
  ansible.builtin.shell: sshpass -p "{{ ansible_ssh_pass }}" ssh -o StrictHostKeyChecking=no "{{ ansible_ssh_user }}"@"{{ inventory_hostname }}" "/system resource print" >> "{{ playbook_dir }}/roles/mikrotik/backups/{{ inventory_hostname }}.system_resource.{{ ansible_date_time.date }}@{{ ansible_date_time.time }}.txt"
  register: output

- name: /system resource print Mikrotik via SSH and save to a txt file in backup Directory output
  debug:
    msg:  "{{ output }}"



- name: system resource print MikroTik
  community.routeros.command:
    commands:
      - /system resource print
      # - system resource print
  register: output

- name: system resource print MikroTik output
  debug:
    msg: "{{ output }}"




- name: interface print on MikroTik
  community.routeros.command:
    commands:
      - /interface print
      # - interface print
  register: output

- name: interface print MikroTik output
  debug:
    msg: "{{ output }}"




- name: ip route print on MikroTik
  community.routeros.command:
    commands:
      - /ip route print
      # - ip route print 
      # - /ip route print brief
      # - ip route print brief
  register: output

- name: ip route print MikroTik output
  debug:
    msg: "{{ output }}"




- name: Execute export command on MikroTik
  community.routeros.command:
    commands:
      - export
      # - export
      # - /export file=myconfig.cfg
      # - export file=myconfig.cfg
  register: output

- name: Execute export command on MikroTik output
  debug:
    msg: "{{ output }}"
  loop: 

- name: Save MikroTik at a file
  copy:
    content: "{{ output.stdout_lines }}"
    dest: "{{ playbook_dir }}/roles/mikrotik/backups/{{ inventory_hostname }}_config.{{ ansible_date_time.date }}@{{ ansible_date_time.time }}.cfg"
    # ansible_date_time.date
    # ansible_date_time.timr
    # iso8601
  register: output

- name: Save MikroTik at a file output
  debug:
    msg:  "New Backup File Location = {{ output.dest }}"












########################  Brouillons: 
# - name: Print output ( Run a command on MikroTik )
#   ansible.builtin.debug:
#     var: system_resource_print.stdout_lines



# - name: Show variable inventory_hostname output
#   debug:
#     msg: IP ADRESS IS -> {{ inventory_hostname }}




# - name: save configuration to file
#   copy:
#     content: "{{ config.config }}"
#     dest: /path/to/config.cfg



# - name: Write the export output to a file
#   lineinfile:
#     create: true
#     path: ./roles/mikrotik/backups/config2.cfg
#     line: "{{ item }}"
#   loop: "{{ output.stdout_lines }}"




# - name: export on MikroTik
#   community.routeros.command:
#     commands:
#       - export
#       # - export
#       # - /export file=myconfig.cfg
#       # - export file=myconfig.cfg
#   register: output

# - name: export MikroTik output
#   debug:
#     msg: "{{ output }}"

# - name: Enregistrement de la configuration de MikroTik dans un fichier
#   copy:
#     content: "{{ output.stdout_lines }}"
#     dest: ./roles/mikrotik/backups/config.cfg


# - name: ip address print on MikroTik
#   community.routeros.command:
#     commands:
#       - /ip address print brief
#       # - ip address print brief
#   register: output

# - name: ip address print MikroTik output
#   debug:
#     msg: "{{ output }}"




# - name: Get Mikrotik configuration
#   uri:
#     url: "http://{{ inventory_hostname }}/export"
#     method: GET
#     return_content: yes
#   register: mikrotik_config

# - name: Save Mikrotik configuration to file
#   template:
#     src: "mikrotik_config.j2"
#     dest: "mikrotik_config.txt"
#   vars:
#     config: "{{ mikrotik_config.content }}"




# - name: PAUSE
#   ansible.builtin.pause:
#     minutes: 5

# - name: Print items on separate lines
#   debug:
#     msg: "{{ item }}"
#   with_items: "{{ output.stdout_lines }}"



# - name: Write list item to file
#   lineinfile:
#     dest: "{{ playbook_dir }}/roles/mikrotik/backups/TEST_2__{{ inventory_hostname }}_config.{{ ansible_date_time.date }}@{{ ansible_date_time.time }}.cfg"
#     line: "{{ output }}"
#   loop: "{{ output.stdout_lines }}"
#   loop_control:
#     loop_var: output





# - name: Create files for each list item
#   file:
#     path: "{{ playbook_dir }}/roles/mikrotik/backups/TEST___{{ inventory_hostname }}_config.{{ ansible_date_time.date }}@{{ ansible_date_time.time }}.cfg"
#     state: touch
#   # loop: "{{ output.stdout_lines }}"
#   register: bkpfiledir

# - name: SHHHHHOOOOW bkpfiledir
#   debug:
#     msg:  "{{ bkpfiledir }}"

# - name: Write list item to file
#   lineinfile:
#     dest: "{{ playbook_dir }}/roles/mikrotik/backups/TEST___{{ inventory_hostname }}_config.{{ ansible_date_time.date }}@{{ ansible_date_time.time }}.cfg"
#     line: "{{ output }}"
#   loop: "{{ output.results }}"
#   loop_control:
#     loop_var: output




# - name: Backup Mikrotik via SSH 
#   command: sshpass -p "{{ ansible_ssh_pass }}" ssh -o StrictHostKeyChecking=no "{{ ansible_ssh_user }}"@"{{ inventory_hostname }}" "/export" >> TEST_"{{ playbook_dir }}/roles/mikrotik/backups/TEST__{{ inventory_hostname }}_config.{{ ansible_date_time.date }}@{{ ansible_date_time.time }}.cfg"
#   register: output


# - name: Save Backup Mikrotik via SSH at a file
#   copy:
#     content: "{{ output.stdout_lines }}"
#     dest: "{{ playbook_dir }}/roles/mikrotik/backups/TEST_2_{{ inventory_hostname }}_config.{{ ansible_date_time.date }}@{{ ansible_date_time.time }}.cfg"
#     # ansible_date_time.date
#     # ansible_date_time.timr
#     # iso8601
#   register: output



# - name: Backup Mikrotik via SSH 
#   command: sshpass -p "{{ ansible_ssh_pass }}" ssh -o StrictHostKeyChecking=no "{{ ansible_ssh_user }}"@"{{ inventory_hostname }}" "/export" >> "{{ playbook_dir }}/roles/mikrotik/backups/TEST_3_{{ inventory_hostname }}_config.{{ ansible_date_time.date }}@{{ ansible_date_time.time }}.cfg"
#   register: output

# - name: Backup Mikrotik via SSH output
#   debug:
#     msg:  "{{ output }}"


# - name: Backup Mikrotik via SSH -> export via SSH - - SHOW output TYPE
#   debug:
#     msg:  "{{ output | type_debug }}"


